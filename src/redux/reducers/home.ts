import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';

export interface PlacesState {
  value: {};
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PlacesState = {
  value: {},
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPlaces = createAsyncThunk(
  'places/fetchPlaces',
  async (input: string) => {
    const response = await fetch(
      `https://api.geoapify.com/v2/places?name=${input}&categories=commercial,activity,accommodation,catering,education,healthcare,heritage,leisure,natural,office&filter=circle:101.693207,3.140853,1000&limit=20&apiKey=${process.env.REACT_APP_PLACES_API_KEY}`
    );

    // Get the JSON from the response:
    const data = await response.json();
    return data;
  }
);

export const placesSlice = createSlice({
  name: 'places',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getPlaces: (state, action: PayloadAction<[]>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPlaces.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPlaces.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      })
      .addCase(fetchPlaces.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { getPlaces } = placesSlice.actions;

export default placesSlice.reducer;